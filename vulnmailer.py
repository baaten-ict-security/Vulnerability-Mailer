######
# VULNERABILITY MAILER
######
# This script checks the Advisories RSS feed of NCSC.nl and sends an e-mail to a specified group of people when a new HIGH/HIGH vulnerability is detected.
#
# Things to be aware of: 
# - The script assumes that all files are in /opt/scripts/vulnmailer/ 
# - The script reads e-mailaddresses from vulnmailer-addresses.txt
# - The script reads the timestamp from the last check from vulnmailer-lastchecked.txt
# - Since the RSS feed's history is limited, it's best to run the script on a daily basis
#
# You can configure this script to run every day at 10:00 by the following cronjob:
# 0 10 * * * root /usr/bin/python3.9 /opt/scripts/vulnmailer/vulnmailer.py > /dev/null 2>&1
#
# Author: Dennis Baaten (Baaten ICT Security)
# With help from: ChatGPT
#
#######

import smtplib
import feedparser
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import datetime

# Email configuration
smtp_server = 'HOSTNAME'
smtp_port = 587  # Change this to your SMTP server's port
smtp_username = 'USER'
smtp_password = 'PASSWORD'
sender_email = 'vulnerabilitymonitor@EXAMPLE.NL'
recipient_emails_file = '/opt/scripts/vulnmailer/vulnmailer-addresses.txt'

# Log file path
log_file = '/opt/scripts/vulnmailer/log.txt'

# RSS feed URL
rss_feed_url = 'https://advisories.ncsc.nl/rss/advisories'

# Load the last checked date and time from a file or initialize it if it doesn't exist
highhighlastchecked_file = '/opt/scripts/vulnmailer/vulnmailer-lastchecked.txt'
try:
    with open(highhighlastchecked_file, 'r') as file:
        last_checked_datetime_str = file.read().strip()
        if last_checked_datetime_str:
            last_checked_datetime = datetime.datetime.strptime(last_checked_datetime_str, '%Y-%m-%d %H:%M:%S %z')
        else:
            last_checked_datetime = None
except FileNotFoundError:
    last_checked_datetime = None

# Current date and time
current_datetime = datetime.datetime.now(datetime.timezone.utc)

# Update the last checked date and time to the current datetime
with open(highhighlastchecked_file, 'w') as file:
    file.write(current_datetime.strftime('%Y-%m-%d %H:%M:%S %z'))

# Open the log file to write messages
with open(log_file, 'a') as log:
    # Add timestamp to the beginning of every log entry
    log.write(f"{current_datetime.strftime('%Y-%m-%d %H:%M:%S')} - ")

    # Parse the RSS feed
    feed = feedparser.parse(rss_feed_url)

    # Get the filtered items published after the last checked date and time
    filtered_items = [
        item for item in feed.entries if "[H/H]" in item.title and (last_checked_datetime is None or datetime.datetime.strptime(item.published, "%a, %d %b %Y %H:%M:%S %z") > last_checked_datetime)
    ]

    # Only send an email if there are new high/high items
    if filtered_items:
        # Read recipient email addresses from the file
        recipient_emails = []
        with open(recipient_emails_file, 'r') as file:
            for line in file:
                recipient_emails.append(line.strip())

        # Create a single email message for all filtered items
        subject = f"[vulmon] Nieuwe kwetsbaarheden (high/high) - {current_datetime.strftime('%Y-%m-%d')}"
        message = MIMEMultipart()
        message['From'] = sender_email
        message['Subject'] = subject

        # Compose the email body with all filtered items
        email_body = ""
        for item in filtered_items:
            title = item.title
            link = item.link
            description = item.description
            pub_date = datetime.datetime.strptime(item.published, "%a, %d %b %Y %H:%M:%S %z").strftime('%Y-%m-%d %H:%M:%S %z')
            email_body += f"<b>Title:</b> {title}<br><b>Publication Date:</b> {pub_date}<br><b>Link:</b> {link}<br><b>Description:</b> {description}<br><br>"

        message.attach(MIMEText(email_body, 'html'))  # Use 'html' format for email body

        # Send the email to all recipients
        for recipient_email in recipient_emails:
            message['To'] = recipient_email
            try:
                smtp = smtplib.SMTP(smtp_server, smtp_port)
                smtp.starttls()
                smtp.login(smtp_username, smtp_password)
                smtp.sendmail(sender_email, recipient_email, message.as_string())
                smtp.quit()
                log.write(f"Email sent to {recipient_email} with subject: {subject}\n")
            except Exception as e:
                log.write(f"Failed to send email to {recipient_email} with subject: {subject}\n")
                log.write(str(e) + "\n")

    else:
        log.write("No new high/high items found. No email sent.\n")
